# -*- coding: utf-8 -*-
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Standard Library
import functools
import json
import os
from typing import Any, Dict

# Third Party Libraries
import requests

LIST_OF_USED_SERVICES = [
    # "AWS Resilience Hub",
    # "AWS OpsWorks for Chef Automate",
    # "Amazon Pinpoint",
    # "AWS Support",
    # "AWS Security Hub",
    # "Amazon Elastic File System (EFS)",
    # "Amazon IVS",
    # "Amazon Lookout for Vision",
    # "AWS IoT Device Management",
    # "Amazon WorkSpaces Thin Client",
    # "Amazon Translate",
    "Amazon Route 53",
    "AWS Identity and Access Management (IAM)",
    # "AWS DeepRacer",
    "Amazon API Gateway",
    "Amazon EventBridge",
    "Amazon Elastic Container Service (ECS)",
    # "Amazon Chime",
    # "AWS Clean Rooms",
    "AWS Step Functions",
    # "Amazon Chime SDK",
    # "Amazon FSx for Windows File Server",
    # "AWS Application Discovery Service",
    # "AWS Elemental MediaPackage",
    # "Amazon Fraud Detector",
    # "AWS Resource Explorer",
    # "Amazon Simple Workflow Service (SWF)",
    # "Amazon Kendra",
    # "AWS Batch",
    # "Amazon DevOps Guru",
    "Amazon Elastic Compute Cloud (EC2)",
    # "AWS Resource Access Manager (RAM)",
    # "AWS IoT TwinMaker",
    # "AWS Global Accelerator",
    # "Amazon File Cache",
    # "AWS License Manager",
    # "Amazon WorkMail",
    # "Amazon Elastic MapReduce (EMR)",
    # "AWS DeepComposer",
    # "Amazon Kinesis Video Streams",
    # "AWS HealthImaging",
    # "AWS WAF",
    # "AWS Elastic Beanstalk",
    # "AWS VPN",
    # "Red Hat OpenShift Service on AWS (ROSA)",
    # "Amazon Cloud Directory",
    # "AWS Elastic Disaster Recovery (DRS)",
    # "AWS Elemental MediaLive",
    # "AWS Telco Network Builder",
    # "AWS Directory Service",
    # "Amazon CodeWhisperer",
    # "AWS OpsWorks for Puppet Enterprise",
    # "AWS Ground Station",
    # "AWS Amplify",
    # "Amazon Managed Service for Apache Flink",
    # "AWS Health Dashboard",
    "Amazon Simple Notification Service (SNS)",
    # "AWS App Runner",
    "AWS Fargate",
    # "Amazon Lex",
    # "AWS Chatbot",
    # "AWS Organizations",
    "Amazon Relational Database Service (RDS)",
    # "AWS Snowcone",
    # "Amazon ElastiCache",
    # "AWS Payment Cryptography",
    # "AWS Migration Hub",
    "Amazon CloudWatch",
    # "Amazon Textract",
    # "Amazon Comprehend",
    "Amazon CloudWatch Logs",
    "AWS AppSync",
    # "FreeRTOS",
    # "Amazon Lightsail",
    # "AWS Server Migration Service (SMS)",
    # "AWS Elemental MediaConnect",
    # "AWS Elemental MediaConvert",
    # "AWS CodeCommit",
    # "Amazon FSx for OpenZFS",
    # "AWS Well-Architected Tool",
    # "Amazon Neptune",
    # "AWS CodeArtifact",
    # "Amazon AppFlow",
    # "AWS Elemental MediaTailor",
    "Amazon Bedrock",
    # "Amazon Managed Workflows for Apache Airflow",
    # "AWS IoT Device Defender",
    # "AWS Trusted Advisor",
    # "Amazon SimpleDB",
    "Amazon Managed Grafana",
    # "Amazon RDS on VMware",
    # "AWS Application Migration Service (MGN)",
    "Amazon Aurora",
    "Amazon Cognito",
    # "AWS IoT SiteWise",
    # "AWS Marketplace",
    # "AWS CodeStar",
    # "AWS Direct Connect",
    # "Amazon Monitron",
    # "Amazon Forecast",
    "AWS IoT Core",
    # "AWS Lake Formation",
    # "Amazon Redshift",
    # "Amazon DocumentDB (with MongoDB compatibility)",
    "AWS CodePipeline",
    "Amazon CloudFront",
    # "Amazon GuardDuty",
    "AWS PrivateLink",
    # "AWS Data Pipeline",
    # "Amazon MQ",
    "Amazon DynamoDB",
    # "AWS Outposts",
    # "Amazon Kinesis Data Streams",
    # "AWS Shield",
    # "AWS Compute Optimizer",
    # "Amazon Connect",
    # "AWS Verified Access",
    # "AWS Control Tower",
    # "CloudEndure Migration",
    "AWS CloudFormation",
    # "AWS User Notifications",
    # "AWS IoT Events",
    # "Amazon FinSpace",
    "Amazon Elastic Container Registry (ECR)",
    # "Amazon CodeGuru",
    "AWS X-Ray",
    # "AWS CodeDeploy",
    # "AWS Device Farm",
    # "Amazon WorkSpaces",
    # "Amazon Braket",
    # "AWS Elemental MediaStore",
    # "AWS IoT Analytics",
    # "AWS Database Migration Service",
    # "Amazon EC2 Auto Scaling",
    # "AWS Managed Services",
    "Amazon Simple Storage Service (S3)",
    # "Amazon Rekognition",
    "AWS Lambda",
    # "Amazon GameLift",
    # "AWS Mainframe Modernization",
    # "AWS Signer",
    # "Amazon Simple Email Service (SES)",
    "AWS Glue",
    # "AWS IoT Greengrass",
    # "Amazon Elastic Inference",
    # "Amazon Elastic Kubernetes Service (EKS)",
    # "AWS IoT 1-Click",
    # "Amazon Verified Permissions",
    # "Amazon WorkDocs",
    # "Amazon Managed Blockchain",
    # "Amazon Location Service",
    # "Amazon Honeycode",
    # "AWS Cost Explorer",
    # "AWS Cloud Control API",
    # "AWS Private 5G",
    # "Amazon QuickSight",
    # "Amazon CloudSearch",
    # "Amazon FSx",
    # "AWS DataSync",
    # "Amazon Transcribe",
    # "Amazon Nimble Studio",
    # "AWS RoboMaker",
    # "AWS CloudTrail",
    # "AWS Artifact",
    # "AWS CloudHSM",
    # "Amazon MemoryDB for Redis",
    # "Amazon Elastic Block Store (EBS)",
    # "Amazon Lookout for Metrics",
    # "Amazon Elastic Transcoder",
    # "Amazon Inspector Classic",
    # "AWS App Mesh",
    "Amazon Data Firehose",
    "Amazon Simple Queue Service (SQS)",
    # "AWS Cost and Usage Report",
    "AWS Systems Manager",
    # "AWS Firewall Manager",
    # "AWS Transfer Family",
    # "AWS AppFabric",
    # "Amazon Personalize",
    # "Amazon WorkSpaces Web",
    # "AWS Cloud Map",
    # "Amazon Lumberyard",
    # "Amazon Augmented AI (A2I)",
    # "Amazon Comprehend Medical",
    # "AWS Proton",
    "Amazon Timestream",
    # "AWS Data Exchange",
    # "EC2 Image Builder",
    # "Amazon AppStream 2.0",
    "AWS IAM Identity Center",
    # "AWS Entity Resolution",
    # "AWS Resource Groups",
    "Elastic Load Balancing",
    # "AWS Cloud9",
    # "Amazon Inspector",
    # "VMware Cloud on AWS",
    "AWS Certificate Manager",
    # "AWS IQ",
    # "AWS Audit Manager",
    # "Amazon FSx for NetApp ONTAP",
    # "Amazon VPC Lattice",
    # "Amazon Keyspaces (for Apache Cassandra)",
    # "Amazon FSx for Lustre",
    # "Amazon Quantum Ledger Database (QLDB)",
    # "AWS HealthLake",
    # "AWS Snowball",
    # "AWS Wickr",
    # "AWS Launch Wizard",
    # "AWS Storage Gateway",
    # "CloudEndure Disaster Recovery",
    # "Amazon Macie",
    "AWS Secrets Manager",
    # "AWS Network Firewall",
    # "AWS Transit Gateway",
    # "AWS Private Certificate Authority",
    "Amazon SageMaker",
    # "AWS SimSpace Weaver",
    "AWS Key Management Service",
    # "AWS Budgets",
    # "Amazon Detective",
    "Amazon Athena",
    # "AWS Service Catalog",
    # "AWS Auto Scaling",
    # "AWS OpsWorks Stacks",
    # "AWS CloudShell",
    # "AWS HealthOmics",
    "AWS CodeBuild",
    "Amazon Virtual Private Cloud (VPC)",
    # "AWS Backup",
    # "AWS Config",
    # "AWS Snowmobile",
    # "Amazon Managed Service for Prometheus",
    # "Amazon Managed Streaming for Apache Kafka",
    # "Amazon Security Lake",
    # "Amazon Polly",
    # "Amazon DataZone",
    # "AWS Fault Injection Service",
    "Amazon OpenSearch Service",
    # "AWS Serverless Application Repository"
]

SUPPORTED_SERVICE_AZ_NAMES = [
    # "accesspoint",
    # "access-analyzer",
    "account",
    # "acm-pca",
    # "airflow.api",
    # "airflow.env",
    # "airflow.ops",
    # "analytics-omics",
    # "app-integrations",
    # "appconfig",
    # "appconfigdata",
    # "application-autoscaling",
    # "appmesh",
    # "appmesh-envoy-management",
    # "apprunner",
    # "apprunner.requests",
    # "appstream.api",
    # "appstream.streaming",
    "appsync-api",
    # "aps",
    # "aps-workspaces",
    "athena",
    # "auditmanager",
    # "autoscaling",
    # "autoscaling-plans",
    "awsconnector",
    # "b2bi",
    # "backup",
    # "backup-gateway",
    # "batch",
    "bedrock",
    "bedrock-agent-runtime",
    "bedrock-runtime",
    # "billingconductor",
    # "braket",
    # "cases",
    # "cassandra",
    # "cassandra-fips",
    # "cleanrooms",
    # "cloudcontrolapi",
    # "cloudcontrolapi-fips",
    # "clouddirectory",
    "cloudformation",
    # "cloudhsmv2",
    "cloudtrail",
    # "codeartifact.api",
    # "codeartifact.repositories",
    "codebuild",
    "codebuild-fips",
    "codecommit",
    "codecommit-fips",
    "codedeploy",
    "codedeploy-commands-secure",
    # "codeguru-profiler",
    # "codeguru-reviewer",
    "codepipeline",
    # "codestar-connections.api",
    # "codewhisperer",
    # "comprehend",
    # "comprehendmedical",
    # "config",
    # "connect-campaigns",
    "console",
    # "control-storage-omics",
    # "data-servicediscovery",
    # "data-servicediscovery-fips",
    # "databrew",
    # "dataexchange",
    # "datasync",
    # "datazone",
    # "deviceadvisor.iot",
    # "devops-guru",
    # "dms",
    # "dms-fips",
    # "drs",
    # "ds",
    "dynamodb",
    "ebs",
    "ec2",
    "ec2messages",
    "ecr.api",
    "ecr.dkr",
    "ecs",
    "ecs-agent",
    "ecs-telemetry",
    # "eks",
    # "eks-auth",
    # "elastic-inference.runtime",
    # "elasticache",
    # "elasticache-fips",
    # "elasticbeanstalk",
    # "elasticbeanstalk-health",
    # "elasticfilesystem",
    # "elasticfilesystem-fips",
    "elasticloadbalancing",
    # "elasticmapreduce",
    # "email-smtp",
    # "emr-containers",
    # "emr-serverless",
    # "emrwal.prod",
    # "entityresolution",
    "events",
    # "evidently",
    # "evidently-dataplane",
    "execute-api",
    # "finspace",
    # "finspace-api",
    # "fis",
    # "forecast",
    # "forecast-fips",
    # "forecastquery",
    # "forecastquery-fips",
    # "frauddetector",
    # "fsx",
    # "fsx-fips",
    # "git-codecommit",
    # "git-codecommit-fips",
    "glue",
    "grafana",
    "grafana-workspace",
    # "greengrass",
    # "groundstation",
    # "guardduty-data",
    # "guardduty-data-fips",
    # "healthlake",
    # "identitystore",
    # "imagebuilder",
    # "inspector2",
    "iot.credentials",
    "iot.data",
    "iot.fleethub.api",
    "iotfleetwise",
    "iotroborunner",
    "iotsitewise.api",
    "iotsitewise.data",
    "iottwinmaker.api",
    "iottwinmaker.data",
    "iotwireless.api",
    # "kendra",
    "kinesis-firehose",
    "kinesis-streams",
    "kms",
    "kms-fips",
    # "lakeformation",
    "lambda",
    # "license-manager",
    # "license-manager-fips",
    # "license-manager-user-subscriptions",
    "logs",
    # "lookoutequipment",
    # "lookoutmetrics",
    # "lookoutvision",
    # "lorawan.cups",
    # "lorawan.lns",
    # "m2",
    # "macie2",
    # "managedblockchain-query",
    # "managedblockchain.bitcoin.mainnet",
    # "managedblockchain.bitcoin.testnet",
    # "mediaconnect",
    # "medical-imaging",
    # "memory-db",
    # "memorydb-fips",
    # "mgn",
    # "migrationhub-orchestrator",
    # "migrationhub-strategy",
    # "models-v2-lex",
    # "monitoring",
    # "neptune-graph",
    # "networkmonitor",
    # "nimble",
    "opensearchserverless"
    # "panorama",
    # "payment-cryptography.controlplane",
    # "payment-cryptography.dataplane",
    # "pca-connector-ad",
    # "personalize",
    # "personalize-events",
    # "personalize-runtime",
    # "pinpoint",
    # "pinpoint-sms-voice-v2",
    # "polly",
    "private-networks",
    # "profile",
    # "proton",
    # "qldb.session",
    "rds",
    "rds-data",
    # "redshift",
    # "redshift-data",
    # "redshift-fips",
    # "refactor-spaces",
    # "rekognition",
    # "rekognition-fips",
    # "robomaker",
    # "rolesanywhere",
    # "rum",
    # "rum-dataplane",
    # "runtime-medical-imaging",
    # "runtime-v2-lex",
    "s3",
    "s3",
    # "s3-outposts",
    # "s3express",
    "sagemaker.api",
    # "sagemaker.featurestore-runtime",
    # "sagemaker.metrics",
    # "sagemaker.runtime",
    # "sagemaker.runtime-fips",
    "secretsmanager",
    # "securityhub",
    "servicecatalog",
    "servicecatalog-appregistry",
    # "servicediscovery",
    # "servicediscovery-fips",
    # "signin",
    # "simspaceweaver",
    # "snow-device-management",
    "sns",
    "sqs",
    "ssm",
    # "ssm-contacts",
    # "ssm-incidents",
    # "ssmmessages",
    "states",
    # "storage-omics",
    # "storagegateway",
    # "streaming-rekognition",
    # "streaming-rekognition-fips",
    "sts",
    # "swf",
    # "swf-fips",
    # "sync-states",
    # "synthetics",
    # "tags-omics",
    # "textract",
    # "textract-fips",
    # "thinclient.api",
    "timestream.ingest-cell2",
    "timestream.query-cell2",
    # "tnb",
    # "transcribe",
    # "transcribestreaming",
    # "transfer",
    # "transfer.server",
    # "translate",
    # "trustedadvisor",
    # "verifiedpermissions",
    # "voiceid",
    # "vpc-lattice",
    # "wisdom",
    # "workflows-omics",
    # "workspaces",
    "xray",
    "privatelink-api",
]

ALL_REGIONS = {
    "ap-northeast-2",
    "eu-west-2",
    "eu-central-2",
    "us-west-1",
    "eu-south-1",
    "eu-south-2",
    "ap-northeast-1",
    "ap-east-1",
    "us-gov-east-1",
    "ca-central-1",
    "ap-southeast-1",
    "ap-northeast-3",
    "ap-southeast-3",
    "us-east-1",
    "eu-north-1",
    "ap-south-2",
    "ap-southeast-2",
    "cn-north-1",
    "eu-west-3",
    "sa-east-1",
    "us-gov-west-1",
    "ap-southeast-4",
    "us-east-2",
    "us-west-2",
    "eu-central-1",
    "ap-south-1",
    "cn-northwest-1",
    "af-south-1",
    "me-south-1",
    "me-central-1",
    "eu-west-1",
}


def load_region_data() -> Dict[str, Any]:
    data = requests.get(
        "https://api.regional-table.region-services.aws.a2z.com/index.json", timeout=10
    )
    region_dict: Dict[str, Any] = json.loads(data.content)

    return region_dict


def check_expected_service_names(region_data: Dict[str, Any]) -> None:
    unique_set = set()

    for region_service in region_data["prices"]:
        # print(region_service["attributes"]["aws:serviceName"])
        unique_set.add(region_service["attributes"]["aws:serviceName"])
        ALL_REGIONS.add(region_service["attributes"]["aws:region"])

    missing_names = [item for item in LIST_OF_USED_SERVICES if item not in unique_set]

    if missing_names:
        print(json.dumps(list(unique_set), indent=2))
        print("------------")
        print("expected services not found:\n")
        print(json.dumps(missing_names, indent=2))


def region_cross_reference(region_data: Dict[str, Any]) -> set[str]:
    def service_regions(service_name: str) -> set[str]:
        regions = set()
        for data in region_data["prices"]:
            if data["attributes"]["aws:serviceName"] == service_name:
                regions.add(data["attributes"]["aws:region"])

        print("-", service_name, "-", len(regions), "-\n-", regions, "\n")

        if len(regions) < service_regions.most_limited_service[1]:  # type: ignore
            service_regions.most_limited_service = (service_name, len(regions))  # type: ignore

        return regions

    service_regions.most_limited_service = ("N/A", 999)  # type: ignore
    possible_regions = functools.reduce(
        lambda x, y: x.intersection(service_regions(y)),
        LIST_OF_USED_SERVICES,
        ALL_REGIONS,
    )

    print("-----------")
    print(sorted(list(possible_regions)))
    print(service_regions.most_limited_service)  # type: ignore
    return possible_regions


def az_check() -> None:
    # run aws ec2 describe-vpc-endpoint-services in the shell and check the list of AvailabilityZones
    # and cross reference with services used to see which AZs can be used
    print("------------")

    current_region = os.popen("aws configure get region").read().strip()  # nosec
    azs = json.load(os.popen("aws ec2 describe-availability-zones"))  # nosec
    endpoints = json.load(os.popen("aws ec2 describe-vpc-endpoint-services"))  # nosec

    supported_azs = set()

    for az in azs["AvailabilityZones"]:
        supported_azs.add(az["ZoneName"])

    for service in endpoints["ServiceDetails"]:
        service_name = (
            service["ServiceName"]
            .replace("com.amazonaws.", "")
            .replace("io.spotinst.vpce.", "")
            .replace("aws.api.", "")
            .replace("aws.sagemaker.", "")
            .replace("s3-global", "")
            .replace(current_region, "")
            .strip(".")
        )
        if service_name in SUPPORTED_SERVICE_AZ_NAMES:
            supported_azs = supported_azs.intersection(
                set(service["AvailabilityZones"])
            )

    print(supported_azs)
    print(
        [
            az["ZoneId"]
            for az in filter(
                lambda x: x["ZoneName"] in supported_azs, azs["AvailabilityZones"]
            )
        ]
    )
    print("------------")


if __name__ == "__main__":
    aws_region_service_data = load_region_data()

    check_expected_service_names(region_data=aws_region_service_data)

    region_cross_reference(region_data=aws_region_service_data)

    az_check()

    # Go here to view region display names:
    # - https://w.amazon.com/bin/view/AWSDocs/new-service/update-general-reference/#HRegionairportcodes
