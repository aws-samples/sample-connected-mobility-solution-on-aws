@startuml cms-user-authentication-sequence-diagram
'Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
'SPDX-License-Identifier: MIT (For details, see https://github.com/awslabs/aws-icons-for-plantuml/blob/master/LICENSE)

!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v14.0/dist
!include AWSPuml/AWSCommon.puml
!include AWSPuml/SecurityIdentityCompliance/Cognito.puml
!include AWSPuml/Compute/Lambda.puml
!include AWSPuml/General/Internet.puml

'Comment out to use default PlantUML sequence formatting
skinparam participant {
    BackgroundColor AWS_BG_COLOR
    BorderColor AWS_BORDER_COLOR
}
skinparam sequence {
    ArrowThickness 2
    LifeLineBorderColor AWS_COLOR
    LifeLineBackgroundColor AWS_BORDER_COLOR
    BoxBorderColor AWS_COLOR
}

!$LAMBDA_COLOR = "#D76511"
!$COGNITO_COLOR = "#D6232C"
!$API_COLOR = "#232F3E"

actor User as user

box API Service
participant "$InternetIMG()\nExternal Service API" as service_api << Service API >>
participant "$LambdaIMG()\nAuthorization Lambda" as authorization_lambda << Lambda Function >>
endbox

box CMS Authentication Module
participant "$CognitoIMG()\nCMS Cognito User Pool" as cognito_user_pool << Cognito >>
participant "$LambdaIMG()\nToken Exchange Lambda" as token_exchange_lambda << Lambda Function >>
participant "$LambdaIMG()\nToken Validation Lambda" as token_validation_lambda << Lambda Function >>
endbox

box Cloud
participant "$InternetIMG()\nCognito OAuth API" as cognito_api << OAuth API >>
endbox

'Use shortcut syntax for activation with colored lifelines and return keyword
user --> cognito_api++ $API_COLOR: Call /authorize endpoint with PKCE and AppClient details
user <-- cognito_api: redirect to /login endpoint with appropriate URL queries
user --> cognito_api: Perform login with valid user credentials
cognito_api --> cognito_user_pool: validate user credentials
return authorization code
|||
user -> token_exchange_lambda++ $LAMBDA_COLOR: Exchange authorization_code for user tokens
cognito_api <- token_exchange_lambda++ $API_COLOR: Send authorization_code and authentication details to /token endpoint
cognito_api --> cognito_api: Validate request
return: user tokens
|||
token_exchange_lambda -> token_validation_lambda++ $LAMBDA_COLOR: Validate id and access token
token_validation_lambda --> token_validation_lambda: Check KID against approved JWKs for user pool
token_validation_lambda --> token_validation_lambda: Verify token signature
token_validation_lambda --> token_validation_lambda: Check token expiration
token_validation_lambda --> token_validation_lambda: Check token user claims (client, issuer, and token_use)
return token validated
return user tokens
|||
user -> service_api++ $API_COLOR: API call with access token in header
service_api -> authorization_lambda++ $LAMBDA_COLOR: Authorize user
authorization_lambda -> token_validation_lambda++ $LAMBDA_COLOR: Validate access token
token_validation_lambda --> token_validation_lambda: Check KID against approved JWKs for user pool
token_validation_lambda --> token_validation_lambda: Verify token signature
token_validation_lambda --> token_validation_lambda: Check token expiration
token_validation_lambda --> token_validation_lambda: Check token user claims (client, issuer, and token_use)
return token validated
return user authorized
service_api --> service_api: perform API operations
return API response
|||

@enduml
