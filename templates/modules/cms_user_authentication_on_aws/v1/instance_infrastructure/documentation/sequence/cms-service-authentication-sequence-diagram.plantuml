@startuml cms-service-authentication-sequence-diagram
'Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
'SPDX-License-Identifier: MIT (For details, see https://github.com/awslabs/aws-icons-for-plantuml/blob/master/LICENSE)

!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v14.0/dist
!include AWSPuml/AWSCommon.puml
!include AWSPuml/SecurityIdentityCompliance/SecretsManager.puml
!include AWSPuml/Compute/Lambda.puml
!include AWSPuml/General/Internet.puml

'Comment out to use default PlantUML sequence formatting
skinparam participant {
    BackgroundColor AWS_BG_COLOR
    BorderColor AWS_BORDER_COLOR
}
skinparam sequence {
    ArrowThickness 2
    LifeLineBorderColor AWS_COLOR
    LifeLineBackgroundColor AWS_BORDER_COLOR
    BoxBorderColor AWS_COLOR
}

!$LAMBDA_COLOR = "#D76511"
!$SECRETS_COLOR = "#D22029"
!$API_COLOR = "#232F3E"

entity ServiceClient as service_client

box API Service
participant "$InternetIMG()\nExternal Service API" as service_api << Service API >>
participant "$LambdaIMG()\nAuthorization Lambda" as authorization_lambda << Lambda Function >>
endbox

box CMS Authentication Module
participant "$SecretsManagerIMG()\nService AppClient Credentials" as secrets_manager << Secrets Manager >>
participant "$LambdaIMG()\nToken Validation Lambda" as token_validation_lambda << Lambda Function >>
endbox

box Cloud
participant "$InternetIMG()\nCognito OAuth API" as cognito_api << OAuth API >>
endbox

'Use shortcut syntax for activation with colored lifelines and return keyword
service_client -> secrets_manager++ $SECRETS_COLOR: Retrieve Service AppClient credentials and scope
return
|||
service_client -> cognito_api++ $API_COLOR: Exchange client credentials for access_token via /token endpoint
cognito_api --> cognito_api: Validate request
return access_token with custom scope
|||
service_client -> service_api++ $API_COLOR: API call with access token in header
service_api -> authorization_lambda++ $LAMBDA_COLOR: Authorize calling service
authorization_lambda -> token_validation_lambda++ $LAMBDA_COLOR: Validate access token
token_validation_lambda --> token_validation_lambda: Check KID against approved JWKs for user pool
token_validation_lambda --> token_validation_lambda: Verify token signature
token_validation_lambda --> token_validation_lambda: Check token expiration
token_validation_lambda --> token_validation_lambda: Check token user claims and scope (client, issuer, and token_use)
return token validated
return user authorized
service_api --> service_api: perform API operations
return API response
|||

@enduml
