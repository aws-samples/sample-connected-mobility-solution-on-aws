@startuml cms-alerts-publish-alert-sequence-diagram
'Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
'SPDX-License-Identifier: MIT (For details, see https://github.com/awslabs/aws-icons-for-plantuml/blob/master/LICENSE)

!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v15.0/dist
!include AWSPuml/AWSCommon.puml
!include AWSPuml/ApplicationIntegration/AppSync.puml
!include AWSPuml/Groups/GenericPink.puml
!include AWSPuml/Compute/Lambda.puml
!include AWSPuml/Database/DynamoDB.puml
!include AWSPuml/Database/DynamoDBStream.puml
!include AWSPuml/ApplicationIntegration/SimpleNotificationService.puml
!include AWSPuml/ApplicationIntegration/SimpleQueueService.puml
!include AWSPuml/ApplicationIntegration/SimpleNotificationServiceEmailNotification.puml


'Comment out to use default PlantUML sequence formatting
skinparam participant {
    BackgroundColor AWS_BG_COLOR
    BorderColor AWS_BORDER_COLOR
}
skinparam sequence {
    ArrowThickness 2
    LifeLineBorderColor AWS_COLOR
    LifeLineBackgroundColor AWS_BORDER_COLOR
    BoxBorderColor AWS_COLOR
}

entity Client as client
box CMS Alerts on AWS Publish Alert Workflow
participant "$AppSyncIMG()\n Publish API" as appsync <<AppSync>>
participant "$LambdaIMG()\nAuthorizer Lambda" as lambdaauthorizer <<Lambda>>
participant "$LambdaIMG()\nPublish Lambda" as lambdapublishalert <<Lambda>>
participant "$SimpleNotificationServiceIMG()\nAlerts SNS  " as snsalerts <<SNS>>
participant "$SimpleQueueServiceIMG()\nAlerts Dead Letter SQS" as sqsalertsdlq <<SQS>>
participant "$SimpleQueueServiceIMG()\nAlerts SQS" as sqsalerts <<SQS>>
participant "$LambdaIMG()\nCreate Alerts Lambda" as lambdaalerts <<Lambda>>
participant "$DynamoDBIMG()\nNotifications Table" as notificationstable <<DynamoDB>>
participant "$SimpleQueueServiceIMG()\nNotifications Dead Letter SQS" as sqsnotificationsdlq <<SQS>>
participant "$DynamoDBStreamIMG()\nDynamoDB Stream" as dynamodbstream <<DynamoDBStream>>
participant "$LambdaIMG()\nSend Notifications Lambda" as lambdanotifications <<Lambda>>
participant "$SimpleNotificationServiceIMG()\nEmail SNS" as snsemail <<SNS>>
participant "$SimpleNotificationServiceEmailNotificationIMG()\nEmail Notification" as emailnotification <<Email>>
endbox

'Use shortcut syntax for activation with colored lifelines and return keyword
client -> appsync: POST/publish
activate appsync #f50581
appsync -> lambdaauthorizer: Authorizes request via the provided JWT
activate lambdaauthorizer #f58027
lambdaauthorizer --> lambdaauthorizer: verify acces token
return
client <-- appsync: unauthorized
|||
appsync -> lambdapublishalert: Sends AppSync query information
activate lambdapublishalert #f58027
lambdapublishalert -> snsalerts: publish to central alerts sns
activate snsalerts #f50581
appsync <-- lambdapublishalert
deactivate lambdapublishalert
client <-- appsync: success
deactivate appsync
snsalerts -> sqsalerts: enqueue alert
deactivate snsalerts
activate sqsalerts #f50581
sqsalerts -> lambdaalerts: invoke with alerts payload
activate lambdaalerts #f58027
sqsalerts <-- lambdaalerts:
sqsalerts -> lambdaalerts: on failure retry (upto 3 times)
sqsalertsdlq <-- sqsalerts: after 3 retries send it to dead letter queue
deactivate sqsalerts
deactivate sqsalertsdlq
lambdaalerts -> notificationstable: add alert to notification table
deactivate lambdaalerts
activate notificationstable #3355DA
notificationstable -> dynamodbstream: stream the changes to dynamodb stream
deactivate notificationstable
activate dynamodbstream #3355DA
dynamodbstream -> lambdanotifications: dynamodbstream triggers lambda
activate lambdanotifications #f58027
dynamodbstream <-- lambdanotifications: success or failure
dynamodbstream -> lambdanotifications: on failure retry (upto 3 times)
dynamodbstream --> sqsnotificationsdlq: after 3 retries send to dead letter queue
deactivate dynamodbstream
lambdanotifications -> snsemail: publish alert on appropriate topic
deactivate lambdanotifications
activate snsemail #f50581
snsemail -> emailnotification: send email alert to subscribers
deactivate snsemail
@enduml
