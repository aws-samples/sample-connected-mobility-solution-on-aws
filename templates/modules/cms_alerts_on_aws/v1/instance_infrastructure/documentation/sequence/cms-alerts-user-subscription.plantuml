@startuml cms-alerts-user-subscription-sequence-diagram
'Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
'SPDX-License-Identifier: MIT (For details, see https://github.com/awslabs/aws-icons-for-plantuml/blob/master/LICENSE)

!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v15.0/dist
!include AWSPuml/AWSCommon.puml
!include AWSPuml/ApplicationIntegration/AppSync.puml
!include AWSPuml/Groups/GenericPink.puml
!include AWSPuml/Compute/Lambda.puml
!include AWSPuml/Database/DynamoDB.puml
!include AWSPuml/ApplicationIntegration/SimpleNotificationService.puml
!include AWSPuml/ApplicationIntegration/SimpleNotificationServiceEmailNotification.puml


'Comment out to use default PlantUML sequence formatting
skinparam participant {
    BackgroundColor AWS_BG_COLOR
    BorderColor AWS_BORDER_COLOR
}
skinparam sequence {
    ArrowThickness 2
    LifeLineBorderColor AWS_COLOR
    LifeLineBackgroundColor AWS_BORDER_COLOR
    BoxBorderColor AWS_COLOR
}

entity Client as client
box CMS Alerts on AWS User Subscriptions Workflow
participant "$AppSyncIMG()\nUser Subscription API" as appsync <<AppSync>>
participant "$LambdaIMG()\nAuthorizer Lambda" as lambdaauthorizer <<Lambda>>
participant "$LambdaIMG()\nUser Subscription Lambda" as lambdausersubscriptionsresolver <<Lambda>>
participant "$DynamoDBIMG()\nUser Subscriptions Table" as usersubscriptionstable <<DynamoDB>>
participant "$SimpleNotificationServiceIMG()\nSNS " as sns <<SNS>>
participant "$SimpleNotificationServiceEmailNotificationIMG()\nEmail Notification" as emailnotification <<Email>>
endbox

'Use shortcut syntax for activation with colored lifelines and return keyword
client -> appsync: POST/update-user-subscriptions\nGET/user-subscriptions
activate appsync #f50581
appsync -> lambdaauthorizer: Authorizes request via the provided JWT
activate lambdaauthorizer
lambdaauthorizer -> lambdaauthorizer: verify token
return
client <-- appsync: unauthorized
|||
appsync -> lambdausersubscriptionsresolver: Sends AppSync query information
activate lambdausersubscriptionsresolver #f58027
lambdausersubscriptionsresolver -> usersubscriptionstable: query dynamodb
activate usersubscriptionstable #3355DA
lambdausersubscriptionsresolver <-- usersubscriptionstable
deactivate usersubscriptionstable
lambdausersubscriptionsresolver -> sns: if /update-user-subscription, create/delete subscriptions
activate sns #f50581
lambdausersubscriptionsresolver <-- sns
appsync <-- lambdausersubscriptionsresolver
deactivate lambdausersubscriptionsresolver
client <-- appsync: return requested or updated subscriptions
deactivate appsync
|||
sns -> emailnotification: subscription confirmation email
deactivate sns
@enduml
